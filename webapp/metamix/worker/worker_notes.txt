NOTES:

Figure out how I can define/compute if a section of a mix has already been created or not
Okay so we can speed up computation by querying the database and seeing if an clip/song with effect applied exists - if so then get data and insert into mix

On the users/web application side of things - we should return some kind of data schema with request and return from worker which describes which parts of the mix have been newly processed and thus we will then we only need to return the parts of the mix which are new - front end already has the other parts - we then just need to piece them together - approach to scale around network bottlenecks - figure out how we can mainatain a desciption of what was computed in worker

On the backend - for future optimization rather than running the mix function everytime we get all appropriate clips with effects - we can figure out how many clips have already been mixed together - bethen only mix the next/changed stages of the mix - final optimization to be made - might not even be worth it - worth checking time taken to mix together usual 1hr mix

JSON schema of mix:

{
	"id": id-of-mix,
	"name": name,
	"description": mix-description,
	"length": length-of-mix,
	"genre": genre-of-mix,
	"songs": [
		{
			"id": id-of-song,
			"start": timestamp-song-start,
			"end": timestamp-song-end,
			"mix_start": timestamp-song-start-mix,
			"mix_end": timestamp-song-end-mix,
			"track_number": track-number-within-timeline-rows,
			"beat_markers": [array of each beat of song (array of timestamps (seconds))],
			"effects": [
				{
					"start": timestamp-of-start,
					"end": timestamp-of-end,
					"type": type-of-effect,
					"params": { //might be an idea to ommit this params object completely and have the values in the effects object 
						"strength_curve": strength-curve,
						"start": starting-effect-value, //might be multiple start and target values for different variable of effect if supported
						"target": target-effect-value,
						"strength_curve_2": strength-curve,
						"start_2": starting-effect-value, //might be multiple start and target values for different variable of effect if supported
						"target_2": target-effect-value
					}
				}
			]
		}
	],
	"clips": [
		{
			"id": id-of-clip,
			"start": timestamp-of-start,
			"end": timestamp-of-end,
			"mix_start": timestamp-song-start-mix,
			"mix_end": timestamp-song-end-mix,
			"track_number": track-number-within-timeline-rows,
			"beat_markers": [array of each beat of song (array of timestamps (seconds))],
			"effects": [
				{
					"start": timestamp-of-start,
					"end": timestamp-of-end,
					"type": type-of-effect,
					"params": {
						"strength_curve": strength-curve,
						"start": starting-effect-value, //might be multiple start and target values for different variable of effect if supported
						"target": target-effect-value,
						"strength_curve_2": strength-curve,
						"start_2": starting-effect-value, //might be multiple start and target values for different variable of effect if supported
						"target_2": target-effect-value
					}
				}
			]
		}
	]
}

Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.10000000015134 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.9000000015366822 milliseconds.
2audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.399999999790452 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.10000000015134 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.800000000395812 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.8999999997322448 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.8999999997322448 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.199999999429565 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.199999999429565 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.899999999674037 milliseconds.
2audio.js?6c3f:124 Call to paintWaveform took 3.9999999990104698 milliseconds.
2audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.300000000512227 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.10000000015134 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.699999999487773 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.9999999990104698 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.199999999429565 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.600000000209548 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.8999999997322448 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.29999999870779 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.300000000512227 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.399999999790452 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 3.9999999990104698 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.099999998288695 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.299999998649582 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.10000000015134 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.300000000512227 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 5.100000000267755 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.10000000015134 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.200000001175795 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.600000000209548 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.199999999371357 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
3audio.js?6c3f:124 Call to paintWaveform took 4.000000000814907 milliseconds.
2audio.js?6c3f:124 Call to paintWaveform took 4.100000000093132 milliseconds.
audio.js?6c3f:124 Call to paintWaveform took 4.29999999870779 milliseconds.